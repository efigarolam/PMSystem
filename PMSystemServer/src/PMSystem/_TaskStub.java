package PMSystem;


/**
* PMSystem/_TaskStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from PMSystem.idl
* domingo 27 de noviembre de 2011 08H25' CST
*/

public class _TaskStub extends org.omg.CORBA.portable.ObjectImpl implements PMSystem.Task
{

  public int setTask (int id_project, String[] users, String title, String description, String start_date, String end_date, int progress, String priority, String state)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTask", true);
                $out.write_long (id_project);
                PMSystem.usersnamesHelper.write ($out, users);
                $out.write_string (title);
                $out.write_string (description);
                $out.write_string (start_date);
                $out.write_string (end_date);
                $out.write_long (progress);
                $out.write_string (priority);
                $out.write_string (state);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return setTask (id_project, users, title, description, start_date, end_date, progress, priority, state        );
            } finally {
                _releaseReply ($in);
            }
  } // setTask

  public int updateTask (int id, int id_project, String[] users, String title, String description, String start_date, String end_date, int progress, String priority, String state)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateTask", true);
                $out.write_long (id);
                $out.write_long (id_project);
                PMSystem.usersnamesHelper.write ($out, users);
                $out.write_string (title);
                $out.write_string (description);
                $out.write_string (start_date);
                $out.write_string (end_date);
                $out.write_long (progress);
                $out.write_string (priority);
                $out.write_string (state);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return updateTask (id, id_project, users, title, description, start_date, end_date, progress, priority, state        );
            } finally {
                _releaseReply ($in);
            }
  } // updateTask

  public int updateProgress (int id, int progress, String notes, String state)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateProgress", true);
                $out.write_long (id);
                $out.write_long (progress);
                $out.write_string (notes);
                $out.write_string (state);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return updateProgress (id, progress, notes, state        );
            } finally {
                _releaseReply ($in);
            }
  } // updateProgress

  public PMSystem.TasksBasicData[] getAllTasks ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllTasks", true);
                $in = _invoke ($out);
                PMSystem.TasksBasicData $result[] = PMSystem.TasksListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAllTasks (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllTasks

  public PMSystem.TaskData getTask (int id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTask", true);
                $out.write_long (id);
                $in = _invoke ($out);
                PMSystem.TaskData $result = PMSystem.TaskDataHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTask (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTask

  public PMSystem.TaskData[] getTasks (String str)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTasks", true);
                $out.write_string (str);
                $in = _invoke ($out);
                PMSystem.TaskData $result[] = PMSystem.TasksInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTasks (str        );
            } finally {
                _releaseReply ($in);
            }
  } // getTasks

  public PMSystem.TaskData[] getTasksByUser (int id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTasksByUser", true);
                $out.write_long (id);
                $in = _invoke ($out);
                PMSystem.TaskData $result[] = PMSystem.TasksInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTasksByUser (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTasksByUser

  public boolean trash (int id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("trash", true);
                $out.write_long (id);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return trash (id        );
            } finally {
                _releaseReply ($in);
            }
  } // trash

  public boolean delete (int id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("delete", true);
                $out.write_long (id);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return delete (id        );
            } finally {
                _releaseReply ($in);
            }
  } // delete

  public boolean restore (int id)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("restore", true);
                $out.write_long (id);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return restore (id        );
            } finally {
                _releaseReply ($in);
            }
  } // restore

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:PMSystem/Task:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _TaskStub
